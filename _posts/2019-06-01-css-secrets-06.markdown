---
layout: post
title: "《CSS揭秘》笔记6 — 结构与布局"
date: 2019-06-01 22:45:12 +0800
categories: learning-notes CSS
tags: css
custom_css: ["2019-06-01-css-secrets/common.css", "2019-06-01-css-secrets/06.css"]
custom_js: ["2019-06-01-css-secrets/06.js"]
---

* content
{:toc}

此篇博客是学习《CSS 揭秘》一书的学习笔记。

## 1. 自适应布局

>众所周知，如果不给元素指定一个具体的 height ，它就会自动适应其内容的高度。

我们如何才能让 width 也具有类似的行为呢？




<figure class="self-adaption-7-1">
  <img src="/images/2019-06-01-css-secrets/cat.jpg" />
  <figcaption><b>min-content size</b>: The smallest size a box could take that doesn’t lead to overflow that could be avoided by choosing a larger size.</figcaption>
</figure>

HTML
```html
<figure class="self-adaption-7-1">
  <img src="/images/2019-06-01-css-secrets/cat.jpg" />
  <figcaption><b>min-content size</b>: The smallest size a box could take that doesn’t lead to overflow that could be avoided by choosing a larger size.</figcaption>
</figure>
```

现在我们希望 `<figure>` 元素（实线方框）的宽度跟它所包含的图片一样宽。

效果如下：
<figure class="self-adaption-7-1 step1">
  <img src="/images/2019-06-01-css-secrets/cat.jpg" />
  <figcaption><b>min-content size</b>: The smallest size a box could take that doesn’t lead to overflow that could be avoided by choosing a larger size.</figcaption>
</figure>

CSS
```css
.self-adaption-7-1.step1 {
  max-width: 300px; /* 回退样式 */
  max-width: min-content;
}
.self-adaption-7-1.step1 > img {
  max-width: inherit;/* 重要 */
}
```

注：
1. `min-content` 将解析为这个容器内部**最大的不可断行元素的宽度**，即最宽的单词、图片或具有固定宽度的盒元素。
2. `max-width: 300px;` 为回退样式，当浏览器无法解析 `min-content` 时，此属性将生效。
3. 给 img 元素设置 `max-width: inherit;` 来继承父元素的 `max-width`。如果 figure 的尺寸由内部元素决定时，此属性不会生效。<br>
**此外**，由于网页公共样式 `img {max-width: 100%:}` 的影响，如果不设置 `max-width: inherit;` ，`<figure>` 元素的宽度将变为最宽文字的宽度，且图片会被缩小至此宽度。

## 2. 根据兄弟元素的数量来设置样式

在某些场景下，我们需要根据兄弟元素的总数来为它们设置样式。<br>

我们可以使用 `:only-chid` 伪类来选择只有一个列表项的情况。试着拖动滑块增加元素的数量看看效果吧。

<div class="sibling-count-7-2 demo1">
  <span>1</span>
  <input type="range" min="1" max="8" value="1">
</div>

CSS
```css
li {
  apacity: .65;
}
li:only-child {
  opacity: 1;
}
```

实际上，`:only-child` 等效于 `:first-child:last-child`，因为如果既是**第一项**又是**最后一项**，那说明列表**只有一项**。<br>

而 `:last-child` 相当于 `:nth-last-child(1)`。因此我们可以通过 `:first-child:nth-last-child(4)` 来命中总数为 4 的列表中的第一项。

<div class="sibling-count-7-2 demo2">
  <span>4</span>
  <input type="range" min="1" max="8" value="4">
</div>

CSS
```css
.sibling-count-7-2.demo2 li:first-child:nth-last-child(4){
  opacity: 1;
}
```

最后在结合兄弟选择符 `~` 选择另外三个选项：

<div class="sibling-count-7-2 demo3">
  <span>4</span>
  <input type="range" min="1" max="8" value="4">
</div>

CSS
```css
.sibling-count-7-2.demo3 li:first-child:nth-last-child(4),
.sibling-count-7-2.demo3 li:first-child:nth-last-child(4) ~ li {
  opacity: 1;
}
```

**根据兄弟元素的数量范围来匹配元素**

`:nth-child()` 中可以使用 `an+b` 表达式。这里 n 表示一个变量，可取 **0** 和**正整数**。如 `:nth-child(n+3)` 会选中第三项及以后的项。

<div class="sibling-count-7-2 demo4">
  <span>4</span>
  <input type="range" min="1" max="8" value="4">
</div>

利用这个技巧，我们可以选中**至少包含四项**的所有列表项。

<div class="sibling-count-7-2 demo5">
  <span>4</span>
  <input type="range" min="1" max="8" value="4">
</div>

CSS
```css
.sibling-count-7-2.demo5 li:first-child:nth-last-child(n+4),
.sibling-count-7-2.demo5 li:first-child:nth-last-child(n+4) ~ li {
  /* 命中至少包含四项的所有列表 */
  opacity: 1;
}
```

使用 `-n+6` 可以选中**最多包含六项**的所有列表项。

<div class="sibling-count-7-2 demo6">
  <span>4</span>
  <input type="range" min="1" max="8" value="6">
</div>

CSS
```css
.sibling-count-7-2.demo6 li:first-child:nth-last-child(-n+6),
.sibling-count-7-2.demo6 li:first-child:nth-last-child(-n+6) ~ li {
  /* 命中至多包含六项的所有列表 */
  opacity: 1;
}
```

最后组合这两种技巧来选中包含 **4 ~ 6** 项的所有列表。

<div class="sibling-count-7-2 demo7">
  <span>4</span>
  <input type="range" min="1" max="8" value="5">
</div>

CSS
```css
.sibling-count-7-2.demo7 li:first-child:nth-last-child(n + 4):nth-last-child(-n + 6),
.sibling-count-7-2.demo7 li:first-child:nth-last-child(n + 4):nth-last-child(-n + 6) ~ li {
  opacity: 1;
}
```

## 3. 满辐的背景，定宽的内容

**margin: auto 方案**

实现这种设计的常用方法是使用两层元素：外层实现满辐的背景，内层实现定宽。然后通过 `margin: auto` 实现水平居中。

<div class="wrapper-7-3">
  <div>
    <h5>margin: auto</h5>
    <p>The browser selects a suitable margin to use. For example, in certain cases this value can be used to center an element.</p>
  </div>
</div>

HTML
```html
<div class="wrapper-7-3">
  <div>
    <!-- 内容 -->
  </div>
</div>
```

CSS
```css
.wrapper-7-3 {
  padding: 10px;
  background: #40a9ff;
}
.wrapper-7-3 div {
  width: 300px;
  margin: auto; /* 自动居中 */
  text-align: justify;
}
```

**calc() 方案**

我们可以使用 `calc()` 函数计算两侧的 `padding` 为 `calc(50% - 150px)` ，最终元素的宽度将为 `300px` 。

<div class="fluid-fixed-7-3">
  <h5>margin: auto</h5>
  <p>The browser selects a suitable margin to use. For example, in certain cases this value can be used to center an element.</p>
</div>

HTML
```html
<div class="fluid-fixed-7-3">
  <!-- 内容 -->
</div>
```

CSS
```css
.fluid-fixed-7-3 {
  padding: 10px; /* 回退方案 */
  padding: 10px calc(50% - 150px); /* 无需指定 width */
  border-radius: 5px;
  color: #f5f5f5;
  background: #40a9ff;
}
```